name: Publish
on:
  push:
    branches: [main]

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    steps:
      - name: Generate a token
        uses: actions/create-github-app-token@v1
        id: generate-token
        with:
          # uses https://github.com/organizations/tinacms/settings/apps/release-bot-allow-prs-and-push
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_SECRET }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token }}
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          package_json_file: package.json
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Build Types
        run: pnpm types

      - name: Set NPMRC
        run: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > .npmrc
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Setup git credentials
        run: |
          git config --global user.email "bot@tina.io"
          git config --global user.name "Tina Realease Bot"

      - name: Create release pull request or publish packages
        uses: changesets/action@v1
        id: changesets
        with:
          version: pnpm run version
          publish: pnpm run publish
          createGithubReleases: true
          setupGitUser: false
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token  }}

      - name: Release to @dev channel
        if: steps.changesets.outputs.hasChangesets == 'true'
        run: |
          git checkout ${{ github.sha }}
          pnpm version:snapshot $(echo ${{ github.sha }} | cut -c1-7)
          pnpm run publish:beta
          echo "A release PR has been created: <https://github.com/tinacms/tinacms/pull/${{ steps.changesets.outputs.pullRequestNumber }}>" >> $GITHUB_STEP_SUMMARY
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token  }}

      - name: Has TinaCMS been published
        id: newTinaCMSVersion
        if: steps.changesets.outputs.published == 'true'
        run: |
          # $publishedPackages is a json array of [{"name": "@xx/xx", "version": "1.2.0"}]
          # work out if tinacms has been published and output the version number
          newTinaCMSVersion=$(echo $publishedPackages | jq -r '.[] | select(.name == "tinacms") | .version')

          if [ -z "$newTinaCMSVersion" ]; then
            echo "❌ TinaCMS not published" >> $GITHUB_STEP_SUMMARY
          else
            echo "🚀 A new version of TinaCMS was released: $newTinaCMSVersion" >> $GITHUB_STEP_SUMMARY
          fi

          echo "newTinaCMSVersion=$newTinaCMSVersion" >> $GITHUB_OUTPUT
        env:
          publishedPackages: ${{ steps.changesets.outputs.publishedPackages }}

      - name: Publish release notes
        if: steps.newTinaCMSVersion.outputs.newTinaCMSVersion != ''
        uses: benc-uk/workflow-dispatch@v1
        with:
          ref: main
          workflow: main-generate-release-notes.yml
          inputs: |
            {
              "release_name": "${{ steps.newTinaCMSVersion.outputs.newTinaCMSVersion }}"
            }
          token: ${{ steps.generate-token.outputs.token }}

      - name: Summary
        if: steps.newTinaCMSVersion.outputs.newTinaCMSVersion == '' && steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo "❌ Nothing was published" >> $GITHUB_STEP_SUMMARY
